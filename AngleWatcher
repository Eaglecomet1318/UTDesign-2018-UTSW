using UnityEngine;
using UnityEngine.UI;

[RequireComponent(typeof(Text))]
public class AngleWatcher : MonoBehaviour
{
    public static AngleWatcher mInstance { get; private set; }

    public Transform viewee;
    public Camera viewer;

    private void Start()
    {
        mInstance = this;
        if (!viewer) viewer = Camera.main;
    }

    void Update()
    {
        if (!viewee)
        {
            GetComponent<Text>().text = "Not tracking";
            return;
        }
        Vector3 distance = (viewer.transform.position - viewee.position).normalized;
        float ax = Mathf.Rad2Deg * Mathf.Acos(distance.x * viewee.right.x);
        float ay = Mathf.Rad2Deg * Mathf.Acos(distance.y * viewee.up.y);
        //float az = Mathf.Rad2Deg * Mathf.Acos(distance.z * transform.forward.z);

        if (ax > 90) ax = ax - 90;
        else ax = 90 - ax;
        if (ay > 90) ay = ay - 90;
        else ay = 90 - ay;
        //target.text = string.Format("{0} {1} {2}", (int)ax, (int)ay, (int)az);

        bool right = Direction(viewee.forward, distance, viewee.up) == -1;
        bool anterior = Direction(viewee.right, distance, viewee.up) == -1;
        bool caudal = Direction(viewee.forward, distance, viewee.right) == -1;
        GetComponent<Text>().text = string.Format("{3}\u00B0 {0}{1}O {4}\u00B0 {2}",
            right ? "R" : "L",
            anterior ? "A" : "P",
            caudal ? "caudal" : "cranial",
            (int)ax,
            (int)ay);
        //target.transform.position = target.transform.parent.position + target.transform.parent.localScale.y * Vector3.up;
    }

    //returns -1 when to the left, 1 to the right, -1 if neither.
    public static float Direction(Vector3 forward, Vector3 target, Vector3 up)
    {
        Vector3 cross = Vector3.Cross(forward, target);
        float direction = Vector3.Dot(cross, up);
        if (direction > 0.0)
        {
            return 1;
        }
        else
        {
            return -1;
        }
    }
}
